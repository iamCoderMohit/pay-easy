// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(cuid())
  name String
  email String @unique
  number String?
  password String?
  pin String?
  emailVerified DateTime?
  image         String?

  wallet Wallet?
  bank Bank?
  sentTxns PeerToPeer[] @relation("SentTransfers")
  recvTxns PeerToPeer[] @relation("ReceivedTransfers")
  onRampTxn onRampTxn[]
  offRampTxn offRampTxn[]
  accounts Account[]
  sessions Session[]
}

model Account{
  id String @id @default(cuid())
  userId String
  type String 
  provider String
  providerAccountId String
  refresh_token String?
  access_token String?
  expires_at Int?
  token_type String?
  scope String?
  id_token String?
  session_state String?
  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Wallet{
  id String @id @default(cuid())
  balance Int @default(0)
  userId String @unique
  user User @relation(fields: [userId], references: [id])
  onRampTxn onRampTxn[]
  offRampTxn offRampTxn[]
}

model onRampTxn{
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  amount Int
  walletId String
  wallet Wallet @relation(fields: [walletId], references: [id])
  status Status
  createdAt DateTime @default(now())
}

model offRampTxn{
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  amount Int
  walletId String
  wallet Wallet @relation(fields: [walletId], references: [id])
  status Status
  createdAt DateTime @default(now())
}

model Bank{
  id String @id @default(cuid())
  userId String @unique
  user User @relation(fields: [userId], references: [id])
  balance Int @default(5000)
}

model PeerToPeer{
  id String @id @default(cuid())
  from User @relation("SentTransfers", fields: [fromId], references: [id])
  fromId String
  to User @relation("ReceivedTransfers", fields: [toId], references: [id])
  toId String
  amount Int
  startedAt DateTime @default(now())
}

enum Status{
  Processing
  Pending
  Success
  Failed
}